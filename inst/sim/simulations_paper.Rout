
R version 3.4.2 (2017-09-28) -- "Short Summer"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(tailTest)
> library(parallel)
> mc.cores = 30
> # Warning! This program will run in parallel and needs a cluster with 30 cores.
> # change mc.cores to the number of available cores, or set it to 1 in a pc
> N        = c(5, 10, 25, 100)
> nsim     = 1000
> q        = 0.05
> alpha    = 0.05
> c        = -.34
> 
> scenarios = data.frame(id      = rep(c(1, 2,   3,    4),   each = 4),
+                        mu_R    = rep(c(0, 0,   0,    0),   each = 4),
+                        mu_T    = rep(c(0, 0.9, 0,    1.5), each = 4),
+                        sigma_R = rep(c(1, 1,   1,    1),   each = 4),
+                        sigma_T = rep(c(1, 0.4, 2.15, 1),   each = 4),
+                        n       = rep(c(5, 10,  25, 100),   times = 4),
+                        power   = NA)
> scenarios
   id mu_R mu_T sigma_R sigma_T   n power
1   1    0  0.0       1    1.00   5    NA
2   1    0  0.0       1    1.00  10    NA
3   1    0  0.0       1    1.00  25    NA
4   1    0  0.0       1    1.00 100    NA
5   2    0  0.9       1    0.40   5    NA
6   2    0  0.9       1    0.40  10    NA
7   2    0  0.9       1    0.40  25    NA
8   2    0  0.9       1    0.40 100    NA
9   3    0  0.0       1    2.15   5    NA
10  3    0  0.0       1    2.15  10    NA
11  3    0  0.0       1    2.15  25    NA
12  3    0  0.0       1    2.15 100    NA
13  4    0  1.5       1    1.00   5    NA
14  4    0  1.5       1    1.00  10    NA
15  4    0  1.5       1    1.00  25    NA
16  4    0  1.5       1    1.00 100    NA
> 
> # Scenarios
> # 1. Distributions of Test and Reference are identical
> # (correct decision: comparable; µR = µT = 0 and σT = σR = 1).
> 
> # 2. The mean values of Test and Reference are different and the variability
> # of Test is much smaller than that of Reference so that the distribution of
> # Reference completely covers the distribution of Test
> # (correct decision: comparable; µR = 0, µT = 0.9, σR = 1 and σT = 0.4).
> 
> # 3. The mean values of Test and Reference are identical, but the variability of Reference
> # is smaller than the variability of Test
> # (correct decision: not comparable; µR = µT = 0 and σR = 1 and σT = 2.15).
> 
> # 4. The variances of Test and Reference are identical, but the distribution of Test is
> # shifted so that the situation is under Tsong’s null hypothesis [4]
> # (correct decision: not comparable; µR = 0 and µT = 1.5 and σR = σT = 1).
> 
> 
> # Possible decisions:
> # Reject   = "Reject the null hypothesis. Comparability can be claimed."
> # NoReject = "Do not reject the null hypothesis. Comparaility cannot be claimed."
> for (i in 1:nrow(scenarios)) {
+  n = scenarios[i, "n"]
+  mu_R = scenarios[i, "mu_R"]
+  mu_T = scenarios[i, "mu_T"]
+  sigma_R = scenarios[i, "sigma_R"]
+  sigma_T = scenarios[i, "sigma_T"]
+  res = unlist(mclapply(X = 1:nsim, FUN = function(x){
+     X_R = rnorm(n, mean = mu_R, sd = sigma_R)
+     X_T = rnorm(n, mean = mu_T, sd = sigma_T)
+     # Perform Test
+     res = tailTest::testis.tails(Test = X_T, Reference = X_R,
+                                  q = q, alpha = alpha, c = c)
+     res$decision
+   }, mc.cores = mc.cores))
+  scenarios[i, "power"] = mean(res)
+ }
> 
> scenarios
   id mu_R mu_T sigma_R sigma_T   n power
1   1    0  0.0       1    1.00   5 0.207
2   1    0  0.0       1    1.00  10 0.435
3   1    0  0.0       1    1.00  25 0.883
4   1    0  0.0       1    1.00 100 1.000
5   2    0  0.9       1    0.40   5 0.462
6   2    0  0.9       1    0.40  10 0.638
7   2    0  0.9       1    0.40  25 0.931
8   2    0  0.9       1    0.40 100 1.000
9   3    0  0.0       1    2.15   5 0.017
10  3    0  0.0       1    2.15  10 0.009
11  3    0  0.0       1    2.15  25 0.004
12  3    0  0.0       1    2.15 100 0.005
13  4    0  1.5       1    1.00   5 0.046
14  4    0  1.5       1    1.00  10 0.049
15  4    0  1.5       1    1.00  25 0.057
16  4    0  1.5       1    1.00 100 0.059
> 
> # Save results
> root = rprojroot::find_package_root_file()
> fileOut = paste0(root, "/inst/sim/simulations_paper.RDS")
> saveRDS(object = scenarios, file = fileOut)
> 
> 
> proc.time()
   user  system elapsed 
246.448  12.849  10.081 
